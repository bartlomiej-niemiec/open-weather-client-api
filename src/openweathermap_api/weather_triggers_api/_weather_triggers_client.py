from src.openweathermap_api.common import Client, parse_request_response_to_format
from src.openweathermap_api.weather_triggers_api.triggers import Trigger, TriggerRequestDataFactory

_DELETE_REQ_SUCCESS_CODE = 204


class WeatherTriggersClient(Client):
    """Wrapper for OpenWeather Weather triggers API."""
    _API_URL = "http://api.openweathermap.org/data/3.0/triggers"

    def register_trigger(self, trigger_parameters: Trigger):
        """register custom trigger.

        :param trigger_parameters: trigger data structure.
        :return: registered trigger information.
        """
        post_request_response = self._send_request(
            'POST',
            url=self._API_URL,
            data=TriggerRequestDataFactory.create_trigger_data(trigger_parameters)
        )
        response = parse_request_response_to_format(post_request_response)
        return response

    def get_alerts_by_trigger(self, trigger_id: str):
        """get all information and alerts generated by the trigger.

        :param trigger_id: id of the trigger.
        :return: all information and alerts generated by the trigger.
        """
        get_request_response = self._send_request(
            'GET',
            url=self._get_api_url_with_extra_arguments(trigger_id),
            data={}

        )
        response = parse_request_response_to_format(get_request_response)
        return response

    def get_all_trigers(self):
        """get all registered triggers.

        :return: list of all registered triggers.
        """
        get_request_response = self._send_request(
            'GET',
            url=self._API_URL,
            data={}

        )
        response = parse_request_response_to_format(get_request_response)
        return response

    def update_trigger(self, trigger_parameters: Trigger, trigger_id: str):
        """update register trigger.

        :param trigger_parameters: new trigger parameters.
        :param trigger_id: id of the trigger.
        :return: updated trigger parameters.
        """
        post_request_response = self._send_request(
            'PUT',
            url=self._get_api_url_with_extra_arguments(trigger_id),
            data=TriggerRequestDataFactory.create_trigger_data(trigger_parameters)
        )
        response = parse_request_response_to_format(post_request_response)
        return response

    def delete_trigger(self, trigger_id: str):
        """delete registered trigger.

        :param trigger_id: id of the trigger.
        :return: true if triggers has been deleted.
        """
        delete_request_response = self._send_request(
            'DELETE',
            url=self._get_api_url_with_extra_arguments(trigger_id),
            data={}
        )
        response = parse_request_response_to_format(delete_request_response)
        return response.status_code == _DELETE_REQ_SUCCESS_CODE

    def get_history_alert(self, trigger_id: str, alert_id: str):
        """get information about the specific alert.

        :param trigger_id: id of the trigger.
        :param alert_id: id of the alert
        :return: information about the specific alert
        """
        get_request_response = self._send_request(
            'GET',
            url=self._get_api_url_with_extra_arguments(trigger_id, "history", alert_id),
            data={}
        )
        response = parse_request_response_to_format(get_request_response)
        return response

    def get_all_history_alerts(self, trigger_id: str):
        """get all history alerts which were generated for specific trigger.

        :param trigger_id: id of the trigger.
        :return: all history alerts
        """
        get_request_response = self._send_request(
            'GET',
            url=self._get_api_url_with_extra_arguments(trigger_id, "history"),
            data={}
        )
        response = parse_request_response_to_format(get_request_response)
        return response

    def delete_history_alert(self, trigger_id: str, alert_id: str):
        """delete history for alert.

        :param trigger_id: id of the trigger.
        :param alert_id: id of the alert.
        :return: true if history has been deleted.
        """
        delete_request_response = self._send_request(
            'DELETE',
            url=self._get_api_url_with_extra_arguments(trigger_id, "history", alert_id),
            data={}
        )
        response = parse_request_response_to_format(delete_request_response)
        return response.status_code == _DELETE_REQ_SUCCESS_CODE

    def delete_all_history_alert(self, trigger_id: str):
        """delete history for all of the registered alerts.

        :param trigger_id: id of the trigger
        :return: true if history has been deleted.
        """
        delete_request_response = self._send_request(
            'DELETE',
            url=self._get_api_url_with_extra_arguments(trigger_id, "history"),
            data={}
        )
        response = parse_request_response_to_format(delete_request_response)
        return response.status_code == _DELETE_REQ_SUCCESS_CODE

    def _get_api_url_with_extra_arguments(self, *args):
        """decorate api url with some extra arguments.

        :param args: arguments to be added to the URL
        :return: URL with extra arguments.
        """
        api_url_with_args = self._API_URL
        for arg in args:
            api_url_with_args += f"/{arg}"
        return api_url_with_args
